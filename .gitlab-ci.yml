image:
  name: tmaier/docker-compose:latest

services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  APP_ROOT: $PROJECT_ROOT_DIR
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_REF_PROTECTED == "true"

stages:
  - check
  - build
  - test
  - deploy

.check: &check
  image: python:3.10.9-bullseye
  stage: check
  only:
    refs:
      - merge_requests
      - main
      - develop
    changes:
      - app/*
      - app/**/*
      - cli.py
  tags:
    - linux

run flake:
  <<: *check
  script:
    - pip install --ignore-installed -q -r requirements.dev.txt
    - flake8 app/ cli.py >flake8.log
  artifacts:
    when: always
    paths:
      - flake8.log
    expire_in: 20 minutes

run black:
  <<: *check
  script:
    - pip install --ignore-installed -q -r requirements.dev.txt
    - black app/ cli.py --check

run mypy:
  <<: *check
  before_script:
    - mkdir -p ~/.pip
    - cp pip.conf ~/.pip/pip.conf
    - cp $NETRC /root/.netrc
    - chmod 400 /root/.netrc
    - python -m netrc
  script:
    - pip install --ignore-installed -q -r requirements.dev.txt
    - pip install --ignore-installed -q -r requirements.txt
    - mypy app/ cli.py
  artifacts:
    when: always
    paths:
      - .mypy_cache
    expire_in: 20 minutes

build image:
  stage: build
  before_script:
    - docker login ${M_DOCKER_HOST} -u ${M_DOCKER_LOGIN} -p ${M_DOCKER_PASSWORD}
  script:
    - cp $NETRC .netrc
    - docker build --cache-from $IMAGE_TAG_SHORT -t $IMAGE_TAG_SHORT . --build-arg APP_ROOT=$APP_ROOT
    - docker push $IMAGE_TAG_SHORT
  only:
    refs:
      - merge_requests
      - main
      - develop
    changes:
      - app/*
      - app/**/*
      - cli.py
      - pytest.ini
      - Dockerfile
      - requirements.txt
      - requirements.medsi.txt
  tags:
    - linux

.pytest: &pytest
  stage: test
  image: $IMAGE_TAG_SHORT
  services:
    - name: postgres:13.2
      alias: db
  before_script:
    - apt-get update
    - apt-get install -y postgresql-client
    - export PGPASSWORD=$POSTGRES_PASSWORD
  script:
    - cp env/.env.test .env
    - pip install -q -r requirements.dev.txt
    - PYTHONPATH=app pytest
      --cov-report term
      --cov-report xml:coverage.xml
      --cov=app
      --junitxml=pytest.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    reports:
      junit: pytest.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

  tags:
    - linux

pytest develop:
  <<: *pytest
  environment:
    name: develop
  variables:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_DB: $COMPOSE_PROJECT_NAME
  only:
    refs:
      - develop

pytest main:
  <<: *pytest
  environment:
    name: production
  variables:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_DB: $COMPOSE_PROJECT_NAME
    CI_COMMIT_REF_NAME: main
  only:
    refs:
      - main

pytest other:
  <<: *pytest
  variables:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_DB: $COMPOSE_PROJECT_NAME
    CI_COMMIT_REF_NAME: $CI_COMMIT_REF_SLUG
  except:
    - develop
    - main

.deploy: &deploy
  stage: deploy
  variables:
    DEVELOP_HOST: $DEVELOP_HOST
    KONG_SERVICE: $KONG_SERVICE
    SSH_PRIVATE_KEY: $SSH_PRIVATE_KEY
    ENV_FILE: $ENV_FILE
  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan ${DEVELOP_HOST} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - docker login ${M_DOCKER_HOST} -u ${M_DOCKER_LOGIN} -p ${M_DOCKER_PASSWORD}

deploy staging:
  <<: *deploy
  environment:
    name: develop
    url: $KONG_SERVICE
  needs:
    - job: pytest develop
      artifacts: false
  script:
    - cp $ENV_FILE .env
    - docker-compose -H "ssh://deploy@$DEVELOP_HOST" pull app
    - docker-compose -H "ssh://deploy@$DEVELOP_HOST" up -d
  only:
    - develop
  tags:
    - linux

deploy production:
  <<: *deploy
  environment:
    name: production
    url: $KONG_SERVICE
  needs:
    - job: pytest main
      artifacts: false
  script:
    - cp $ENV_FILE .env
    - docker-compose -H "ssh://deploy@$DEVELOP_HOST" pull app
    - docker-compose -H "ssh://deploy@$DEVELOP_HOST" up -d
  only:
    - main
  tags:
    - production
